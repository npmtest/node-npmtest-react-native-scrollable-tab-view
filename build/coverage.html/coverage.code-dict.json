{"/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/test.js":"/* istanbul instrument in package npmtest_react_native_scrollable_tab_view */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/lib.npmtest_react_native_scrollable_tab_view.js":"/* istanbul instrument in package npmtest_react_native_scrollable_tab_view */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_scrollable_tab_view = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_scrollable_tab_view = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-scrollable-tab-view && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_scrollable_tab_view */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_scrollable_tab_view\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_scrollable_tab_view.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_scrollable_tab_view.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_scrollable_tab_view.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_scrollable_tab_view.__dirname + '/lib.npmtest_react_native_scrollable_tab_view.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/node_modules/react-native-scrollable-tab-view/index.js":"const React = require('react');\nconst {\n  PropTypes,\n  Component,\n} = React;\nconst ReactNative = require('react-native');\nconst {\n  Dimensions,\n  View,\n  Animated,\n  ScrollView,\n  Platform,\n  StyleSheet,\n  ViewPagerAndroid,\n  InteractionManager,\n} = ReactNative;\nconst TimerMixin = require('react-timer-mixin');\n\nconst SceneComponent = require('./SceneComponent');\nconst DefaultTabBar = require('./DefaultTabBar');\nconst ScrollableTabBar = require('./ScrollableTabBar');\n\n\nconst ScrollableTabView = React.createClass({\n  mixins: [TimerMixin, ],\n  statics: {\n    DefaultTabBar,\n    ScrollableTabBar,\n  },\n  scrollOnMountCalled: false,\n\n  propTypes: {\n    tabBarPosition: PropTypes.oneOf(['top', 'bottom', 'overlayTop', 'overlayBottom', ]),\n    initialPage: PropTypes.number,\n    page: PropTypes.number,\n    onChangeTab: PropTypes.func,\n    onScroll: PropTypes.func,\n    renderTabBar: PropTypes.any,\n    style: View.propTypes.style,\n    contentProps: PropTypes.object,\n    scrollWithoutAnimation: PropTypes.bool,\n    locked: PropTypes.bool,\n    prerenderingSiblingsNumber: PropTypes.number,\n  },\n\n  getDefaultProps() {\n    return {\n      tabBarPosition: 'top',\n      initialPage: 0,\n      page: -1,\n      onChangeTab: () => {},\n      onScroll: () => {},\n      contentProps: {},\n      scrollWithoutAnimation: false,\n      locked: false,\n      prerenderingSiblingsNumber: 0,\n    };\n  },\n\n  getInitialState() {\n    return {\n      currentPage: this.props.initialPage,\n      scrollValue: new Animated.Value(this.props.initialPage),\n      containerWidth: Dimensions.get('window').width,\n      sceneKeys: this.newSceneKeys({ currentPage: this.props.initialPage, }),\n    };\n  },\n\n  componentWillReceiveProps(props) {\n    if (props.children !== this.props.children) {\n      this.updateSceneKeys({ page: this.state.currentPage, children: props.children, });\n    }\n\n    if (props.page >= 0 && props.page !== this.state.currentPage) {\n      this.goToPage(props.page);\n    }\n  },\n\n  goToPage(pageNumber) {\n    if (Platform.OS === 'ios') {\n      const offset = pageNumber * this.state.containerWidth;\n      if (this.scrollView) {\n        this.scrollView.scrollTo({x: offset, y: 0, animated: !this.props.scrollWithoutAnimation, });\n      }\n    } else {\n      if (this.scrollView) {\n        if (this.props.scrollWithoutAnimation) {\n          this.scrollView.setPageWithoutAnimation(pageNumber);\n        } else {\n          this.scrollView.setPage(pageNumber);\n        }\n      }\n    }\n\n    const currentPage = this.state.currentPage;\n    this.updateSceneKeys({\n      page: pageNumber,\n      callback: this._onChangeTab.bind(this, currentPage, pageNumber),\n    });\n  },\n\n  renderTabBar(props) {\n    if (this.props.renderTabBar === false) {\n      return null;\n    } else if (this.props.renderTabBar) {\n      return React.cloneElement(this.props.renderTabBar(props), props);\n    } else {\n      return <DefaultTabBar {...props} />;\n    }\n  },\n\n  updateSceneKeys({ page, children = this.props.children, callback = () => {}, }) {\n    let newKeys = this.newSceneKeys({ previousKeys: this.state.sceneKeys, currentPage: page, children, });\n    this.setState({currentPage: page, sceneKeys: newKeys, }, callback);\n  },\n\n  newSceneKeys({ previousKeys = [], currentPage = 0, children = this.props.children, }) {\n    let newKeys = [];\n    this._children(children).forEach((child, idx) => {\n      let key = this._makeSceneKey(child, idx);\n      if (this._keyExists(previousKeys, key) ||\n        this._shouldRenderSceneKey(idx, currentPage)) {\n        newKeys.push(key);\n      }\n    });\n    return newKeys;\n  },\n\n  _shouldRenderSceneKey(idx, currentPageKey) {\n    let numOfSibling = this.props.prerenderingSiblingsNumber;\n    return (idx < (currentPageKey + numOfSibling + 1) &&\n      idx > (currentPageKey - numOfSibling - 1));\n  },\n\n  _keyExists(sceneKeys, key) {\n    return sceneKeys.find((sceneKey) => key === sceneKey);\n  },\n\n  _makeSceneKey(child, idx) {\n    return child.props.tabLabel + '_' + idx;\n  },\n\n  renderScrollableContent() {\n    if (Platform.OS === 'ios') {\n      const scenes = this._composeScenes();\n      return <ScrollView\n        horizontal\n        pagingEnabled\n        automaticallyAdjustContentInsets={false}\n        contentOffset={{ x: this.props.initialPage * this.state.containerWidth, }}\n        ref={(scrollView) => { this.scrollView = scrollView; }}\n        onScroll={(e) => {\n          const offsetX = e.nativeEvent.contentOffset.x;\n          if (offsetX === 0 && !this.scrollOnMountCalled) {\n            this.scrollOnMountCalled = true;\n          } else {\n            this._updateScrollValue(offsetX / this.state.containerWidth);\n          }\n        }}\n        onMomentumScrollBegin={this._onMomentumScrollBeginAndEnd}\n        onMomentumScrollEnd={this._onMomentumScrollBeginAndEnd}\n        scrollEventThrottle={16}\n        scrollsToTop={false}\n        showsHorizontalScrollIndicator={false}\n        scrollEnabled={!this.props.locked}\n        directionalLockEnabled\n        alwaysBounceVertical={false}\n        keyboardDismissMode=\"on-drag\"\n        {...this.props.contentProps}\n      >\n          {scenes}\n      </ScrollView>;\n    } else {\n      const scenes = this._composeScenes();\n      return <ViewPagerAndroid\n        key={this._children().length}\n        style={styles.scrollableContentAndroid}\n        initialPage={this.props.initialPage}\n        onPageSelected={this._updateSelectedPage}\n        keyboardDismissMode=\"on-drag\"\n        scrollEnabled={!this.props.locked}\n        onPageScroll={(e) => {\n          const { offset, position, } = e.nativeEvent;\n          this._updateScrollValue(position + offset);\n        }}\n        ref={(scrollView) => { this.scrollView = scrollView; }}\n        {...this.props.contentProps}\n      >\n        {scenes}\n      </ViewPagerAndroid>;\n    }\n  },\n\n  _composeScenes() {\n    return this._children().map((child, idx) => {\n      let key = this._makeSceneKey(child, idx);\n      return <SceneComponent\n        key={child.key}\n        shouldUpdated={this._shouldRenderSceneKey(idx, this.state.currentPage)}\n        style={{width: this.state.containerWidth, }}\n      >\n        {this._keyExists(this.state.sceneKeys, key) ? child : <View tabLabel={child.props.tabLabel}/>}\n      </SceneComponent>;\n    });\n  },\n\n  _onMomentumScrollBeginAndEnd(e) {\n    const offsetX = e.nativeEvent.contentOffset.x;\n    const page = Math.round(offsetX / this.state.containerWidth);\n    if (this.state.currentPage !== page) {\n      this._updateSelectedPage(page);\n    }\n  },\n\n  _updateSelectedPage(nextPage) {\n    let localNextPage = nextPage;\n    if (typeof localNextPage === 'object') {\n      localNextPage = nextPage.nativeEvent.position;\n    }\n\n    const currentPage = this.state.currentPage;\n    this.updateSceneKeys({\n      page: localNextPage,\n      callback: this._onChangeTab.bind(this, currentPage, localNextPage),\n    });\n  },\n\n  _onChangeTab(prevPage, currentPage) {\n    this.props.onChangeTab({\n      i: currentPage,\n      ref: this._children()[currentPage],\n      from: prevPage,\n    });\n  },\n\n  _updateScrollValue(value) {\n    this.state.scrollValue.setValue(value);\n    this.props.onScroll(value);\n  },\n\n  _handleLayout(e) {\n    const { width, } = e.nativeEvent.layout;\n\n    if (Math.round(width) !== Math.round(this.state.containerWidth)) {\n      this.setState({ containerWidth: width, });\n      this.requestAnimationFrame(() => {\n        this.goToPage(this.state.currentPage);\n      });\n    }\n  },\n\n  _children(children = this.props.children) {\n    return React.Children.map(children, (child) => child);\n  },\n\n  render() {\n    let overlayTabs = (this.props.tabBarPosition === 'overlayTop' || this.props.tabBarPosition === 'overlayBottom');\n    let tabBarProps = {\n      goToPage: this.goToPage,\n      tabs: this._children().map((child) => child.props.tabLabel),\n      activeTab: this.state.currentPage,\n      scrollValue: this.state.scrollValue,\n      containerWidth: this.state.containerWidth,\n    };\n\n    if (this.props.tabBarBackgroundColor) {\n      tabBarProps.backgroundColor = this.props.tabBarBackgroundColor;\n    }\n    if (this.props.tabBarActiveTextColor) {\n      tabBarProps.activeTextColor = this.props.tabBarActiveTextColor;\n    }\n    if (this.props.tabBarInactiveTextColor) {\n      tabBarProps.inactiveTextColor = this.props.tabBarInactiveTextColor;\n    }\n    if (this.props.tabBarTextStyle) {\n      tabBarProps.textStyle = this.props.tabBarTextStyle;\n    }\n    if (this.props.tabBarUnderlineStyle) {\n      tabBarProps.underlineStyle = this.props.tabBarUnderlineStyle;\n    }\n    if (overlayTabs) {\n      tabBarProps.style = {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        [this.props.tabBarPosition === 'overlayTop' ? 'top' : 'bottom']: 0,\n      };\n    }\n\n    return <View style={[styles.container, this.props.style, ]} onLayout={this._handleLayout}>\n      {this.props.tabBarPosition === 'top' && this.renderTabBar(tabBarProps)}\n      {this.renderScrollableContent()}\n      {(this.props.tabBarPosition === 'bottom' || overlayTabs) && this.renderTabBar(tabBarProps)}\n    </View>;\n  },\n});\n\nmodule.exports = ScrollableTabView;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollableContentAndroid: {\n    flex: 1,\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/node_modules/react-native-scrollable-tab-view/Button.android.js":"const React = require('react');\nconst ReactNative = require('react-native');\nconst {\n  TouchableNativeFeedback,\n  View,\n} = ReactNative;\n\nconst Button = (props) => {\n  return <TouchableNativeFeedback\n    delayPressIn={0}\n    background={TouchableNativeFeedback.SelectableBackground()} // eslint-disable-line new-cap\n    {...props}\n  >\n    {props.children}\n  </TouchableNativeFeedback>;\n};\n\nmodule.exports = Button;\n","/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/node_modules/react-native-scrollable-tab-view/Button.ios.js":"const React = require('react');\nconst ReactNative = require('react-native');\nconst {\n TouchableOpacity,\n  View,\n} = ReactNative;\n\nconst Button = (props) => {\n  return <TouchableOpacity {...props}>\n    {props.children}\n  </TouchableOpacity>;\n};\n\nmodule.exports = Button;\n","/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/node_modules/react-native-scrollable-tab-view/DefaultTabBar.js":"const React = require('react');\nconst ReactNative = require('react-native');\nconst {\n  StyleSheet,\n  Text,\n  View,\n  Animated,\n} = ReactNative;\nconst Button = require('./Button');\n\nconst DefaultTabBar = React.createClass({\n  propTypes: {\n    goToPage: React.PropTypes.func,\n    activeTab: React.PropTypes.number,\n    tabs: React.PropTypes.array,\n    backgroundColor: React.PropTypes.string,\n    activeTextColor: React.PropTypes.string,\n    inactiveTextColor: React.PropTypes.string,\n    textStyle: Text.propTypes.style,\n    tabStyle: View.propTypes.style,\n    renderTab: React.PropTypes.func,\n    underlineStyle: View.propTypes.style,\n  },\n\n  getDefaultProps() {\n    return {\n      activeTextColor: 'navy',\n      inactiveTextColor: 'black',\n      backgroundColor: null,\n    };\n  },\n\n  renderTabOption(name, page) {\n  },\n\n  renderTab(name, page, isTabActive, onPressHandler) {\n    const { activeTextColor, inactiveTextColor, textStyle, } = this.props;\n    const textColor = isTabActive ? activeTextColor : inactiveTextColor;\n    const fontWeight = isTabActive ? 'bold' : 'normal';\n\n    return <Button\n      style={{flex: 1, }}\n      key={name}\n      accessible={true}\n      accessibilityLabel={name}\n      accessibilityTraits='button'\n      onPress={() => onPressHandler(page)}\n    >\n      <View style={[styles.tab, this.props.tabStyle, ]}>\n        <Text style={[{color: textColor, fontWeight, }, textStyle, ]}>\n          {name}\n        </Text>\n      </View>\n    </Button>;\n  },\n\n  render() {\n    const containerWidth = this.props.containerWidth;\n    const numberOfTabs = this.props.tabs.length;\n    const tabUnderlineStyle = {\n      position: 'absolute',\n      width: containerWidth / numberOfTabs,\n      height: 4,\n      backgroundColor: 'navy',\n      bottom: 0,\n    };\n\n    const left = this.props.scrollValue.interpolate({\n      inputRange: [0, 1, ], outputRange: [0,  containerWidth / numberOfTabs, ],\n    });\n    return (\n      <View style={[styles.tabs, {backgroundColor: this.props.backgroundColor, }, this.props.style, ]}>\n        {this.props.tabs.map((name, page) => {\n          const isTabActive = this.props.activeTab === page;\n          const renderTab = this.props.renderTab || this.renderTab;\n          return renderTab(name, page, isTabActive, this.props.goToPage);\n        })}\n        <Animated.View style={[tabUnderlineStyle, { left, }, this.props.underlineStyle, ]} />\n      </View>\n    );\n  },\n});\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingBottom: 10,\n  },\n  tabs: {\n    height: 50,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    borderWidth: 1,\n    borderTopWidth: 0,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    borderColor: '#ccc',\n  },\n});\n\nmodule.exports = DefaultTabBar;\n","/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/node_modules/react-native-scrollable-tab-view/SceneComponent.js":"const React = require('react');\nconst ReactNative = require('react-native');\nconst {Component, } = React;\nconst {View, StyleSheet, } = ReactNative;\n\nconst StaticContainer = require('./StaticContainer');\n\nconst SceneComponent = (Props) => {\n  const {shouldUpdated, ...props, } = Props;\n  return <View {...props}>\n      <StaticContainer shouldUpdate={shouldUpdated}>\n        {props.children}\n      </StaticContainer>\n  </View>;\n};\n\nmodule.exports = SceneComponent;\n","/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/node_modules/react-native-scrollable-tab-view/ScrollableTabBar.js":"const React = require('react');\nconst ReactNative = require('react-native');\nconst {\n  View,\n  Animated,\n  StyleSheet,\n  ScrollView,\n  Text,\n  Platform,\n  Dimensions,\n} = ReactNative;\nconst Button = require('./Button');\n\nconst WINDOW_WIDTH = Dimensions.get('window').width;\n\nconst ScrollableTabBar = React.createClass({\n  propTypes: {\n    goToPage: React.PropTypes.func,\n    activeTab: React.PropTypes.number,\n    tabs: React.PropTypes.array,\n    backgroundColor: React.PropTypes.string,\n    activeTextColor: React.PropTypes.string,\n    inactiveTextColor: React.PropTypes.string,\n    scrollOffset: React.PropTypes.number,\n    style: View.propTypes.style,\n    tabStyle: View.propTypes.style,\n    tabsContainerStyle: View.propTypes.style,\n    textStyle: Text.propTypes.style,\n    renderTab: React.PropTypes.func,\n    underlineStyle: View.propTypes.style,\n  },\n\n  getDefaultProps() {\n    return {\n      scrollOffset: 52,\n      activeTextColor: 'navy',\n      inactiveTextColor: 'black',\n      backgroundColor: null,\n      style: {},\n      tabStyle: {},\n      tabsContainerStyle: {},\n      underlineStyle: {},\n    };\n  },\n\n  getInitialState() {\n    this._tabsMeasurements = [];\n    return {\n      _leftTabUnderline: new Animated.Value(0),\n      _widthTabUnderline: new Animated.Value(0),\n      _containerWidth: null,\n    };\n  },\n\n  componentDidMount() {\n    this.props.scrollValue.addListener(this.updateView);\n  },\n\n  updateView(offset) {\n    const position = Math.floor(offset.value);\n    const pageOffset = offset.value % 1;\n    const tabCount = this.props.tabs.length;\n    const lastTabPosition = tabCount - 1;\n\n    if (tabCount === 0 || offset.value < 0 || offset.value > lastTabPosition) {\n      return;\n    }\n\n    if (this.necessarilyMeasurementsCompleted(position, position === lastTabPosition)) {\n      this.updateTabPanel(position, pageOffset);\n      this.updateTabUnderline(position, pageOffset, tabCount);\n    }\n  },\n\n  necessarilyMeasurementsCompleted(position, isLastTab) {\n    return this._tabsMeasurements[position] &&\n      (isLastTab || this._tabsMeasurements[position + 1]) &&\n      this._tabContainerMeasurements &&\n      this._containerMeasurements;\n  },\n\n  updateTabPanel(position, pageOffset) {\n    const containerWidth = this._containerMeasurements.width;\n    const tabWidth = this._tabsMeasurements[position].width;\n    const nextTabMeasurements = this._tabsMeasurements[position + 1];\n    const nextTabWidth = nextTabMeasurements && nextTabMeasurements.width || 0;\n    const tabOffset = this._tabsMeasurements[position].left;\n    const absolutePageOffset = pageOffset * tabWidth;\n    let newScrollX = tabOffset + absolutePageOffset;\n\n    // center tab and smooth tab change (for when tabWidth changes a lot between two tabs)\n    newScrollX -= (containerWidth - (1 - pageOffset) * tabWidth - pageOffset * nextTabWidth) / 2;\n    newScrollX = newScrollX >= 0 ? newScrollX : 0;\n\n    if (Platform.OS === 'android') {\n      this._scrollView.scrollTo({x: newScrollX, y: 0, animated: false, });\n    } else {\n      const rightBoundScroll = this._tabContainerMeasurements.width - (this._containerMeasurements.width);\n      newScrollX = newScrollX > rightBoundScroll ? rightBoundScroll : newScrollX;\n      this._scrollView.scrollTo({x: newScrollX, y: 0, animated: false, });\n    }\n\n  },\n\n  updateTabUnderline(position, pageOffset, tabCount) {\n    const lineLeft = this._tabsMeasurements[position].left;\n    const lineRight = this._tabsMeasurements[position].right;\n\n    if (position < tabCount - 1) {\n      const nextTabLeft = this._tabsMeasurements[position + 1].left;\n      const nextTabRight = this._tabsMeasurements[position + 1].right;\n\n      const newLineLeft = (pageOffset * nextTabLeft + (1 - pageOffset) * lineLeft);\n      const newLineRight = (pageOffset * nextTabRight + (1 - pageOffset) * lineRight);\n\n      this.state._leftTabUnderline.setValue(newLineLeft);\n      this.state._widthTabUnderline.setValue(newLineRight - newLineLeft);\n    } else {\n      this.state._leftTabUnderline.setValue(lineLeft);\n      this.state._widthTabUnderline.setValue(lineRight - lineLeft);\n    }\n  },\n\n  renderTab(name, page, isTabActive, onPressHandler, onLayoutHandler) {\n    const { activeTextColor, inactiveTextColor, textStyle, } = this.props;\n    const textColor = isTabActive ? activeTextColor : inactiveTextColor;\n    const fontWeight = isTabActive ? 'bold' : 'normal';\n\n    return <Button\n      key={`${name}_${page}`}\n      accessible={true}\n      accessibilityLabel={name}\n      accessibilityTraits='button'\n      onPress={() => onPressHandler(page)}\n      onLayout={onLayoutHandler}\n    >\n      <View style={[styles.tab, this.props.tabStyle, ]}>\n        <Text style={[{color: textColor, fontWeight, }, textStyle, ]}>\n          {name}\n        </Text>\n      </View>\n    </Button>;\n  },\n\n  measureTab(page, event) {\n    const { x, width, height, } = event.nativeEvent.layout;\n    this._tabsMeasurements[page] = {left: x, right: x + width, width, height, };\n    this.updateView({value: this.props.scrollValue._value, });\n  },\n\n  render() {\n    const tabUnderlineStyle = {\n      position: 'absolute',\n      height: 4,\n      backgroundColor: 'navy',\n      bottom: 0,\n    };\n\n    const dynamicTabUnderline = {\n      left: this.state._leftTabUnderline,\n      width: this.state._widthTabUnderline,\n    };\n\n    return <View\n      style={[styles.container, {backgroundColor: this.props.backgroundColor, }, this.props.style, ]}\n      onLayout={this.onContainerLayout}\n    >\n      <ScrollView\n        ref={(scrollView) => { this._scrollView = scrollView; }}\n        horizontal={true}\n        showsHorizontalScrollIndicator={false}\n        showsVerticalScrollIndicator={false}\n        directionalLockEnabled={true}\n        bounces={false}\n        scrollsToTop={false}\n      >\n        <View\n          style={[styles.tabs, {width: this.state._containerWidth, }, this.props.tabsContainerStyle, ]}\n          ref={'tabContainer'}\n          onLayout={this.onTabContainerLayout}\n        >\n          {this.props.tabs.map((name, page) => {\n            const isTabActive = this.props.activeTab === page;\n            const renderTab = this.props.renderTab || this.renderTab;\n            return renderTab(name, page, isTabActive, this.props.goToPage, this.measureTab.bind(this, page));\n          })}\n          <Animated.View style={[tabUnderlineStyle, dynamicTabUnderline, this.props.underlineStyle, ]} />\n        </View>\n      </ScrollView>\n    </View>;\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // If the tabs change, force the width of the tabs container to be recalculated\n    if (JSON.stringify(this.props.tabs) !== JSON.stringify(nextProps.tabs) && this.state._containerWidth) {\n      this.setState({ _containerWidth: null, });\n    }\n  },\n\n  onTabContainerLayout(e) {\n    this._tabContainerMeasurements = e.nativeEvent.layout;\n    let width = this._tabContainerMeasurements.width;\n    if (width < WINDOW_WIDTH) {\n      width = WINDOW_WIDTH;\n    }\n    this.setState({ _containerWidth: width, });\n    this.updateView({value: this.props.scrollValue._value, });\n  },\n\n  onContainerLayout(e) {\n    this._containerMeasurements = e.nativeEvent.layout;\n    this.updateView({value: this.props.scrollValue._value, });\n  },\n});\n\nmodule.exports = ScrollableTabBar;\n\nconst styles = StyleSheet.create({\n  tab: {\n    height: 49,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingLeft: 20,\n    paddingRight: 20,\n  },\n  container: {\n    height: 50,\n    borderWidth: 1,\n    borderTopWidth: 0,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    borderColor: '#ccc',\n  },\n  tabs: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-scrollable-tab-view/node_modules/react-native-scrollable-tab-view/StaticContainer.js":"var React = require('react');\n\nclass StaticContainer extends React.Component {\n\n  shouldComponentUpdate(nextProps: Object): boolean {\n    return !!nextProps.shouldUpdate;\n  }\n\n  render(): ?ReactElement {\n    var child = this.props.children;\n    if (child === null || child === false) {\n      return null;\n    }\n    return React.Children.only(child);\n  }\n\n}\n\nmodule.exports = StaticContainer;\n"}